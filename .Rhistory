message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "KS" # significance test - either "W", "T" or "KS".
p_value <- FALSE
emp_p <- TRUE # significance test (randomly sample to generate gene set)
es_value <- FALSE
plotting <- TRUE
reps <- 10 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "KS" # significance test - either "W", "T" or "KS".
p_value <- FALSE
emp_p <- TRUE # significance test (randomly sample to generate gene set)
es_value <- FALSE
plotting <- TRUE
reps <- 1000 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- FALSE
emp_p <- FALSE # significance test (randomly sample to generate gene set)
es_value <- TRUE
plotting <- TRUE
reps <- 1000 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- FALSE # significance test (randomly sample to generate gene set)
es_value <- FALSE
plotting <- FALSE
reps <- 2 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- TRUE # significance test (randomly sample to generate gene set)
es_value <- FALSE
plotting <- FALSE
reps <- 2 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- TRUE # significance test (randomly sample to generate gene set)
es_value <- FALSE
plotting <- FALSE
reps <- 5 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- TRUE # significance test (randomly sample to generate gene set)
es_value <- FALSE
plotting <- TRUE
reps <- 5 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- FALSE # significance test (randomly sample to generate gene set)
es_value <- TRUE
plotting <- TRUE
reps <- 5 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
output %>% arrange(desc(es.value))
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- FALSE # significance test (randomly sample to generate gene set)
es_value <- TRUE
plotting <- TRUE
reps <- 5 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- TRUE # significance test (randomly sample to generate gene set)
es_value <- FALSE
plotting <- TRUE
reps <- 5 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
es_value <- TRUE
plotting <- TRUE
reps <- 5 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Perform a statistical test for each tissue in the Tabula Muris ES? data.
# Possibility to perform permutation tests as well.
stats_test <- "W" # significance test - either "W", "T" or "KS".
p_value <- TRUE
emp_p <- TRUE # significance test (randomly sample to generate gene set)
es_value <- TRUE
plotting <- TRUE
reps <- 5 # number of repetitions.
num_cores <- 1 # number of cores # detectCores().
num_background <- 0
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
output
# Load statistical tests functions.
source("tool_1/statistical_tests.R")
# Perform statistical tests + measure time of execution.
system.time({
message("Time of execution for statistical tests: ")
output <- statistical_test(data = cellex_data, # output_list / output
subset = subset_genes,
background = background_genes,
stat_test = stats_test,
p_val = p_value,
p_val_adjust = TRUE,
emp_p_val = emp_p,
es_val = es_value,
sort_val = TRUE,
plot = plotting,
n_rep = reps,
n_cores = num_cores,
n_background = num_background)
})
source("tool_1/ppi.R")
# Select the gene set you want to use.
source("tool_1/gene_set.R")
print("\nHi")
message("Hi")
message("\nHi")
message("Hello\nHi")
message("Hello
Hi")
Sys.Date()
Sys.Date()
today()
Sys.time()
strsplit(Sys.time(), split = " ")
test <- Sys.time()
strsplit(test, split = " ")
strsplit(test, split = ",")
strsplit(x = test, split = ",")
?strsplit()
test
typeof(test)
test[1]
test[2]
toString(test)
strsplit(x = toString(test), split = " ")
unlist(strsplit(x = toString(test), split = " "))
mcmapply
installed.packages()
?stats
?Reduce
tibble
library(tidyverse)
?pheatmap::pheatmap()
V()
readRDS("../../Cloud Storage/OneDrive - Københavns Universitet/Dokumenter/KU_Kandidat/2. år/Intomics/Block1-2_project/Code_and_data/Output/liver_emp_w_two-sided_all-genes_es-scores_norm-3.rds")
output <- readRDS("../../Cloud Storage/OneDrive - Københavns Universitet/Dokumenter/KU_Kandidat/2. år/Intomics/Block1-2_project/Code_and_data/Output/liver_emp_w_two-sided_all-genes_es-scores_norm-3.rds")
output
output <- output[[1]]
output
?ggplot2::aes_string()
source("tool_1/plotting.R")
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
library(devtools)
devtools::install()
file.path(R.home(), "bin/x64")
list.files(file.path(R.home(), "bin/x64"))
devtools::install()
getwd()
?devtools::install()
devtools::install(quick = TRUE)
.Last.error.trace()
.Last.error.trace
Sys.getenv('PATH')
Sys.getenv('PATH')
Sys.getenv('PATH')
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
devtools::install()
Sys.getenv('PATH')
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
Sys.getenv('PATH')
devtools::install()
devtools::install()
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
devtools::install()
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
library("devtools")
install.packages("devtools")
devtools::install()
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
devtools::install()
cellex.enrichment.analysis
devtools::install()
?cellex.enrichment.analysis::enrichment_analysis()
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
devtools::install()
cellex.enrichment.analysis::enrichment_analysis()
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
devtools::install()
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
cellex.enrichment.analysis::enrichment_analysis()
setwd("../")
getwd()
gene_set <- readr::read_tsv(gzfile(paste0("../Cloud Storage/OneDrive - Københavns Universitet/Dokumenter/KU_Kandidat/2. år/Intomics/Block1-2_project/Code_and_data/tissue_data/Protein_atlas/Enriched/liver.tsv.gz")))
gene_set
gene_Set <- gene_set$Ensembl
gene_set
rm(gene_Set)
gene_set
gene_set <- gene_set$Ensembl
gene_set
cellex.enrichment.analysis::enrichment_analysis(input_set = gene_set)
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
setwd("../")
setwd("F:/Coding_stuff/cellex.enrichment.analysis")
devtools::install()
setwd("../")
getwd()
gene_set <- readr::read_tsv(gzfile(paste0("../Cloud Storage/OneDrive - Københavns Universitet/Dokumenter/KU_Kandidat/2. år/Intomics/Block1-2_project/Code_and_data/tissue_data/Protein_atlas/Enriched/liver.tsv.gz")))
gene_set <- gene_set$Ensembl
cellex.enrichment.analysis::enrichment_analysis(input_set = gene_set)
library(cellex.enrichment.analysis)
